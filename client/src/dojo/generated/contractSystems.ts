/* Autogenerated file. Do not edit manually. */

import { DojoProvider } from "@dojoengine/core";
import { Config } from "../../../dojo.config.ts";
import { Account, UniversalDetails, shortString } from "starknet";

export interface Signer {
  account: Account;
}

export interface Register extends Signer {
  shortName: string;
  fullName: string;
  romPath: string;
}

export interface Update extends Signer {
  gameId: number;
  shortName: string;
  fullName: string;
  romPath: string;
}

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export const getContractByName = (manifest: any, name: string) => {
  const contract = manifest.contracts.find((contract: any) =>
    contract.name.includes("::" + name),
  );
  if (contract) {
    return contract.address;
  } else {
    return "";
  }
};

export async function setupWorld(provider: DojoProvider, config: Config) {
  const details: UniversalDetails | undefined = undefined; // { maxFee: 1e15 };

  function actions() {
    const contract_name = "actions";
    const contract = config.manifest.contracts.find((c: any) =>
      c.name.includes(contract_name),
    );
    if (!contract) {
      throw new Error(`Contract ${contract_name} not found in manifest`);
    }

    const register = async ({
      account,
      shortName,
      fullName,
      romPath,
    }: Register) => {
      try {
        return await provider.execute(
          account,
          {
            contractName: contract_name,
            entrypoint: "register",
            calldata: [
              provider.getWorldAddress(),
              shortString.encodeShortString(shortName),
              shortString.encodeShortString(fullName),
              shortString.encodeShortString(romPath),
            ],
          },
          details,
        );
      } catch (error) {
        console.error("Error executing register:", error);
        throw error;
      }
    };

    const update = async ({
      account,
      gameId,
      shortName,
      fullName,
      romPath,
    }: Update) => {
      try {
        return await provider.execute(
          account,
          {
            contractName: contract_name,
            entrypoint: "update",
            calldata: [
              provider.getWorldAddress(),
              gameId,
              shortString.encodeShortString(shortName),
              shortString.encodeShortString(fullName),
              shortString.encodeShortString(romPath),
            ],
          },
          details,
        );
      } catch (error) {
        console.error("Error executing rename:", error);
        throw error;
      }
    };

    return {
      address: contract.address,
      register,
      update,
    };
  }

  return {
    actions: actions(),
  };
}
